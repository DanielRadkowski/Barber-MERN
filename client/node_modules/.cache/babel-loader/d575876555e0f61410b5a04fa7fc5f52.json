{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\src\\\\components\\\\Calendar.jsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nconst Styles = styled.div`\n\n`;\nexport default function Calendar() {\n  const [state, setState] = useState({\n    currentMonth: new Date(),\n    selectedDate: new Date()\n  });\n\n  let renderHeader = () => {\n    const dateFormat = \"MMMM yyyy\";\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"arrow far fa-caret-square-left\",\n      onClick: prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, dateFns.format(state.currentMonth, dateFormat))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"arrow far fa-caret-square-right\",\n      onClick: nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }))));\n  };\n\n  let renderDays = () => {\n    const dateFormat = \"iiii\";\n    const days = [];\n    let startDate = dateFns.startOfWeek(state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(Col, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, days));\n  };\n\n  let renderCells = () => {\n    const [state, useState] = useState({\n      currentMonth,\n      selectedDate\n    });\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let date = \"\";\n\n    for (day; day <= endDate; day++) {\n      for (let i = 0; i < 7; i++) {\n        date = dateFns.format(day, dateFormat);\n        days.push(React.createElement(Col, {\n          className: \"\",\n          key: day,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, date)));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push(React.createElement(Row, {\n        className: \"\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n  };\n\n  let onDateClick = day => {};\n\n  let nextMonth = () => {\n    setState({\n      currentMonth: dateFns.addMonths(state.currentMonth, 1)\n    });\n  };\n\n  let prevMonth = () => {\n    setState({\n      currentMonth: dateFns.subMonths(state.currentMonth, 1)\n    });\n  };\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, renderHeader(), renderDays(), renderCells());\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/src/components/Calendar.jsx"],"names":["React","useState","styled","dateFns","breakpoints","Container","Row","Col","Styles","div","Calendar","state","setState","currentMonth","Date","selectedDate","renderHeader","dateFormat","prevMonth","format","nextMonth","renderDays","days","startDate","startOfWeek","i","push","addDays","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","date","onDateClick","addMonths","subMonths"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nconst Styles = styled.div`\r\n\r\n`\r\n\r\nexport default function Calendar() {\r\n\r\n    const [state, setState] = useState({\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n    });\r\n\r\n\r\n\r\n    let renderHeader = () => {\r\n        const dateFormat = \"MMMM yyyy\";\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <i class=\"arrow far fa-caret-square-left\" onClick={prevMonth}></i>\r\n                    </Col>\r\n                    <Col>\r\n                        <span>\r\n                            {dateFns.format(state.currentMonth, dateFormat)}\r\n                        </span>\r\n                    </Col>\r\n                    <Col>\r\n                        <i class=\"arrow far fa-caret-square-right\" onClick={nextMonth}></i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    let renderDays = () => {\r\n        const dateFormat = \"iiii\";\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek(state.currentMonth);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <Col key={i}>\r\n                    {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n                </Col>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">{days}</Row>\r\n            </Container>\r\n        );\r\n\r\n    }\r\n\r\n    let renderCells = () => {\r\n        const [state, useState] = useState({\r\n            currentMonth,\r\n            selectedDate\r\n        });\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart);\r\n        const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let date = \"\";\r\n\r\n\r\n        for(day; day <= endDate; day++) {\r\n            for(let i = 0; i < 7; i++) {\r\n                date = dateFns.format(day, dateFormat);\r\n                days.push(\r\n                    <Col className=\"\" key={day}>\r\n                        <span>{date}</span>\r\n                    </Col>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n            rows.push(\r\n                <Row className=\"\" key={day}>\r\n                    {days}\r\n                </Row>\r\n            );\r\n            days = [];\r\n        }\r\n    }\r\n\r\n    let onDateClick = day => { }\r\n\r\n    let nextMonth = () => {\r\n        setState({\r\n            currentMonth: dateFns.addMonths(state.currentMonth, 1)\r\n        });\r\n    }\r\n\r\n    let prevMonth = () => {\r\n        setState({\r\n            currentMonth: dateFns.subMonths(state.currentMonth, 1)\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <Styles>\r\n            {renderHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}