{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\client\\\\src\\\\components\\\\BookWindow\\\\CalendarCells.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport circle from '../../pictures/red-circle.png';\nconst Styles = styled.div`\n\n@media (min-width: ${breakpoints.xs}) {\n\n    .cell {\n        font-family: 'Anton', sans-serif;\n        font-size: 1.25em;\n    }\n\n    .unavailable-cell {\n        color: #e0e2eb !important;\n    }\n\n    .choosen-cell {\n        background: url(${circle});\n        background-size: 100%;\n        background-repeat: no-repeat;\n        padding: 5px 0;\n        margin: -5px 0;\n        border-style: none;\n    }\n    .available-cell {\n        &:hover {\n            cursor: pointer;\n            background: url(${circle});\n            background-size: 100%;\n            background-repeat: no-repeat;\n            padding: 5px 0;\n            margin: -5px 0;\n            border-style: none;\n        }\n    }\n}\n\n@media (min-width: ${breakpoints.md}) {\n    .cell {\n        font-size: 1.5em;\n    }\n    \n    .choosen-cell { \n        background-size: 100%;      \n        background-position: 0px;\n        padding: 15px 0;\n        margin: -15px 0;     \n    }\n    .available-cell {\n        &:hover {\n            background-size: 100%;\n            background-position: 0px;\n            padding: 15px 0;\n            margin: -15px 0;            \n        }\n    }\n}  \n\n@media (min-width: ${breakpoints.lg}) {\n    .cell {\n        font-size: 1.5em;\n    }\n    \n    .choosen-cell { \n        background-size: 60%;      \n        background-position: 20px; \n        padding: 20px 0;\n        margin: -20px 0;     \n    }\n    .available-cell {\n        &:hover {\n            background-size: 60%;\n            background-position: 20px;\n            padding: 20px 0;\n            margin: -20px 0;             \n        }\n    }\n}    \n`;\nexport default function CalendarCells(props) {\n  const {\n    currentMonth,\n    selectedDate,\n    currentDate\n  } = props.state;\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n  const startDate = dateFns.startOfWeek(monthStart, {\n    weekStartsOn: 1\n  });\n  const endDate = dateFns.endOfWeek(monthEnd, {\n    weekStartsOn: 1\n  });\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  for (day; day <= endDate; day++) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, \"d\");\n      const cloneDay = day;\n      days.push(React.createElement(Col, {\n        className: `\n                        ${dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day) ? \"available-cell\" : \"unavailable-cell\"}\n                        ${dateFns.isSameDay(day, selectedDate) ? \"choosen-cell\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"} \n                        \n                        px-0\n                        `,\n        key: day,\n        onClick: () => props.onDateClick(cloneDay),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"cell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, formattedDate)));\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push(React.createElement(Row, {\n      className: \"text-center\",\n      key: day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, days));\n    days = [];\n  }\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, rows));\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/client/src/components/BookWindow/CalendarCells.jsx"],"names":["React","styled","dateFns","breakpoints","Container","Row","Col","circle","Styles","div","xs","md","lg","CalendarCells","props","currentMonth","selectedDate","currentDate","state","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","weekStartsOn","endDate","endOfWeek","rows","days","day","formattedDate","i","format","cloneDay","push","isSameDay","isBefore","isSameMonth","onDateClick","addDays"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport circle from '../../pictures/red-circle.png';\r\n\r\nconst Styles = styled.div`\r\n\r\n@media (min-width: ${breakpoints.xs}) {\r\n\r\n    .cell {\r\n        font-family: 'Anton', sans-serif;\r\n        font-size: 1.25em;\r\n    }\r\n\r\n    .unavailable-cell {\r\n        color: #e0e2eb !important;\r\n    }\r\n\r\n    .choosen-cell {\r\n        background: url(${circle});\r\n        background-size: 100%;\r\n        background-repeat: no-repeat;\r\n        padding: 5px 0;\r\n        margin: -5px 0;\r\n        border-style: none;\r\n    }\r\n    .available-cell {\r\n        &:hover {\r\n            cursor: pointer;\r\n            background: url(${circle});\r\n            background-size: 100%;\r\n            background-repeat: no-repeat;\r\n            padding: 5px 0;\r\n            margin: -5px 0;\r\n            border-style: none;\r\n        }\r\n    }\r\n}\r\n\r\n@media (min-width: ${breakpoints.md}) {\r\n    .cell {\r\n        font-size: 1.5em;\r\n    }\r\n    \r\n    .choosen-cell { \r\n        background-size: 100%;      \r\n        background-position: 0px;\r\n        padding: 15px 0;\r\n        margin: -15px 0;     \r\n    }\r\n    .available-cell {\r\n        &:hover {\r\n            background-size: 100%;\r\n            background-position: 0px;\r\n            padding: 15px 0;\r\n            margin: -15px 0;            \r\n        }\r\n    }\r\n}  \r\n\r\n@media (min-width: ${breakpoints.lg}) {\r\n    .cell {\r\n        font-size: 1.5em;\r\n    }\r\n    \r\n    .choosen-cell { \r\n        background-size: 60%;      \r\n        background-position: 20px; \r\n        padding: 20px 0;\r\n        margin: -20px 0;     \r\n    }\r\n    .available-cell {\r\n        &:hover {\r\n            background-size: 60%;\r\n            background-position: 20px;\r\n            padding: 20px 0;\r\n            margin: -20px 0;             \r\n        }\r\n    }\r\n}    \r\n`\r\n\r\nexport default function CalendarCells(props) {\r\n\r\n    const { currentMonth, selectedDate, currentDate } = props.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n    const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n\r\n    for (day; day <= endDate; day++) {\r\n        for (let i = 0; i < 7; i++) {\r\n            formattedDate = dateFns.format(day, \"d\");\r\n            const cloneDay = day;\r\n            days.push(\r\n                <Col\r\n                    className={`\r\n                        ${dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)\r\n                        ? \"available-cell\" : \"unavailable-cell\"}\r\n                        ${dateFns.isSameDay(day, selectedDate)\r\n                        ? \"choosen-cell\"\r\n                        : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"} \r\n                        \r\n                        px-0\r\n                        `}\r\n\r\n                    key={day}\r\n                    onClick={() => props.onDateClick(cloneDay)}\r\n                >\r\n                    <span className=\"cell\">{formattedDate}</span>\r\n                </Col>\r\n            );\r\n            day = dateFns.addDays(day, 1);\r\n        }\r\n        rows.push(\r\n            <Row className=\"text-center\" key={day}>\r\n                {days}\r\n            </Row>\r\n        );\r\n        days = [];\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            <Container>{rows}</Container>\r\n        </Styles>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}