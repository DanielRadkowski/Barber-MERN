{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\src\\\\components\\\\Calendar.jsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Hours from './Hours';\nconst Styles = styled.div`\n\n`;\nconst [state, setState] = useState({\n  currentMonth: new Date(),\n  selectedDate: new Date() // hoursWindow: \"d-none\"\n\n});\nconst currentDate = new Date();\n\nlet renderHeader = () => {\n  const dateFormat = \"MMMM yyyy\";\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"arrow far fa-caret-square-left\",\n    onClick: prevMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, dateFns.format(state.currentMonth, dateFormat))), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"arrow far fa-caret-square-right\",\n    onClick: nextMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }))));\n};\n\nlet renderDays = () => {\n  const dateFormat = \"iiii\";\n  const days = [];\n  let startDate = dateFns.startOfWeek(state.currentMonth, {\n    weekStartsOn: 1\n  });\n\n  for (let i = 0; i < 7; i++) {\n    days.push(React.createElement(Col, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, days));\n};\n\nlet renderCells = () => {\n  const {\n    currentMonth,\n    selectedDate\n  } = state;\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n  const startDate = dateFns.startOfWeek(monthStart, {\n    weekStartsOn: 1\n  });\n  const endDate = dateFns.endOfWeek(monthEnd, {\n    weekStartsOn: 1\n  });\n  const dateFormat = \"d\";\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  for (day; day <= endDate; day++) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, dateFormat);\n      const cloneDay = day;\n      days.push(React.createElement(Col, {\n        className: ` ${dateFns.isSameDay(day, selectedDate) ? \"text-danger\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`,\n        key: day,\n        onClick: () => onDateClick(cloneDay),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, console.log(state), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, formattedDate)));\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push(React.createElement(Row, {\n      className: \"text-center\",\n      key: day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, days));\n    days = [];\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, rows);\n};\n\nlet onDateClick = day => {\n  setState({\n    selectedDate: day // hoursWindow: \"d-block\"\n\n  });\n};\n\nlet nextMonth = () => {\n  setState({\n    currentMonth: dateFns.addMonths(state.currentMonth, 1)\n  });\n};\n\nlet prevMonth = () => {\n  if (dateFns.differenceInCalendarMonths(state.currentMonth, currentDate) > 0) {\n    setState({\n      currentMonth: dateFns.subMonths(state.currentMonth, 1)\n    });\n  }\n};\n\nexport default function Calendar() {\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, renderHeader(), renderDays(), renderCells());\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/src/components/Calendar.jsx"],"names":["React","useState","styled","dateFns","breakpoints","Container","Row","Col","Hours","Styles","div","state","setState","currentMonth","Date","selectedDate","currentDate","renderHeader","dateFormat","prevMonth","format","nextMonth","renderDays","days","startDate","startOfWeek","weekStartsOn","i","push","addDays","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","cloneDay","isSameDay","isSameMonth","onDateClick","console","log","addMonths","differenceInCalendarMonths","subMonths","Calendar"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Hours from './Hours';\r\n\r\nconst Styles = styled.div`\r\n\r\n`\r\nconst [state, setState] = useState({\r\n    currentMonth: new Date(),\r\n    selectedDate: new Date()\r\n   // hoursWindow: \"d-none\"\r\n});\r\n\r\nconst currentDate = new Date();\r\n\r\n\r\nlet renderHeader = () => {\r\n    const dateFormat = \"MMMM yyyy\";\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"text-center\">\r\n                <Col>\r\n                    <i className=\"arrow far fa-caret-square-left\" onClick={prevMonth}></i>\r\n                </Col>\r\n                <Col>\r\n                    <span>\r\n                        {dateFns.format(state.currentMonth, dateFormat)}\r\n                    </span>\r\n                </Col>\r\n                <Col>\r\n                    <i className=\"arrow far fa-caret-square-right\" onClick={nextMonth}></i>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nlet renderDays = () => {\r\n    const dateFormat = \"iiii\";\r\n    const days = [];\r\n\r\n    let startDate = dateFns.startOfWeek(state.currentMonth, { weekStartsOn: 1 });\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n        days.push(\r\n            <Col key={i}>\r\n                {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n            </Col>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"text-center\">{days}</Row>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nlet renderCells = () => {\r\n    const { currentMonth, selectedDate } = state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n    const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n\r\n    for (day; day <= endDate; day++) {\r\n        for (let i = 0; i < 7; i++) {\r\n            formattedDate = dateFns.format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n                <Col\r\n                className={` ${dateFns.isSameDay(day, selectedDate) \r\n                    ? \"text-danger\" \r\n                    : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`}\r\n                               \r\n                    key={day}\r\n                    onClick={() => onDateClick(cloneDay)}\r\n                    \r\n                >\r\n                   {console.log(state)}\r\n                    <span>{formattedDate}</span>\r\n                </Col>\r\n            );\r\n            day = dateFns.addDays(day, 1);\r\n        }\r\n        rows.push(\r\n            <Row className=\"text-center\" key={day}>\r\n                {days}\r\n            </Row>\r\n        );\r\n        days = [];\r\n    }\r\n    return <Container>{rows}</Container>\r\n}\r\n\r\n\r\n\r\nlet onDateClick = day => {\r\n    setState({\r\n        selectedDate: day,\r\n        // hoursWindow: \"d-block\"\r\n    });\r\n }\r\n\r\nlet nextMonth = () => {\r\n    setState({\r\n        currentMonth: dateFns.addMonths(state.currentMonth, 1)\r\n    });\r\n}\r\n\r\nlet prevMonth = () => {\r\n    if (dateFns.differenceInCalendarMonths(state.currentMonth, currentDate) > 0) {\r\n        setState({\r\n            currentMonth: dateFns.subMonths(state.currentMonth, 1)\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default function Calendar() {\r\n\r\n\r\n\r\n    return (\r\n        <Styles>\r\n            {renderHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n            {/* <Hours class={state.hoursWindow} /> */}\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}