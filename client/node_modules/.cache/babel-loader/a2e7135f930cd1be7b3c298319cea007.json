{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\client\\\\src\\\\components\\\\BookWindow\\\\Thanks.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport ReactLoading from \"react-loading\";\nimport FadeIn from \"react-fade-in\";\nimport Lottie from \"react-lottie\";\nimport * as loader from \"../../animations/splashy-loader.json\";\nimport * as tick from \"../../animations/red-tick.json\";\nimport styled from 'styled-components';\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: loader.default,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n};\nconst defaultOptions2 = {\n  loop: false,\n  autoplay: true,\n  animationData: tick.default,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n};\nconst Styles = styled.div`\n\n#eeeeee;\n\n`;\nexport default function Thanks(props) {\n  const [state, setState] = useState({\n    //loading: undefined,\n    done: undefined\n  }); // useEffect(() => {\n  //   setTimeout(() => {\n  //     fetch(\"https://jsonplaceholder.typicode.com/posts\")\n  //       .then(response => response.json())\n  //       .then(() => {\n  //         setState({ loading: true });\n  //         setTimeout(() => {\n  //           setState({ done: true });\n  //         }, 1000);\n  //       });\n  //   }, 1200);\n  // })\n\n  return React.createElement(Styles, {\n    className: `${props.className} text-center`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, !state.done ? React.createElement(ReactLoading, {\n    type: \"bars\",\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"hello world\"));\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/client/src/components/BookWindow/Thanks.jsx"],"names":["React","useState","useEffect","ReactLoading","FadeIn","Lottie","loader","tick","styled","defaultOptions","loop","autoplay","animationData","default","rendererSettings","preserveAspectRatio","defaultOptions2","Styles","div","Thanks","props","state","setState","done","undefined","className"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sCAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gCAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,IADe;AAErBC,EAAAA,QAAQ,EAAE,IAFW;AAGrBC,EAAAA,aAAa,EAAEN,MAAM,CAACO,OAHD;AAIrBC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,mBAAmB,EAAE;AADL;AAJG,CAAvB;AAQA,MAAMC,eAAe,GAAG;AACtBN,EAAAA,IAAI,EAAE,KADgB;AAEtBC,EAAAA,QAAQ,EAAE,IAFY;AAGtBC,EAAAA,aAAa,EAAEL,IAAI,CAACM,OAHE;AAItBC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,mBAAmB,EAAE;AADL;AAJI,CAAxB;AASA,MAAME,MAAM,GAAGT,MAAM,CAACU,GAAI;;;;CAA1B;AAMA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC;AAC/B;AACAsB,IAAAA,IAAI,EAAEC;AAFyB,GAAD,CAAlC,CAFkC,CAOlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAG,GAAEJ,KAAK,CAACK,SAAU,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACJ,KAAK,CAACE,IAAP,GACC,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAE,MAApB;AAA4B,IAAA,KAAK,EAAE,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJN,CADF;AASH","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactLoading from \"react-loading\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport Lottie from \"react-lottie\";\r\nimport * as loader from \"../../animations/splashy-loader.json\";\r\nimport * as tick from \"../../animations/red-tick.json\";\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst defaultOptions = {\r\n  loop: true,\r\n  autoplay: true,\r\n  animationData: loader.default,\r\n  rendererSettings: {\r\n    preserveAspectRatio: \"xMidYMid slice\"\r\n  }\r\n};\r\nconst defaultOptions2 = {\r\n  loop: false,\r\n  autoplay: true,\r\n  animationData: tick.default,\r\n  rendererSettings: {\r\n    preserveAspectRatio: \"xMidYMid slice\"\r\n  }\r\n};\r\n\r\nconst Styles = styled.div`\r\n\r\n#eeeeee;\r\n\r\n`\r\n\r\nexport default function Thanks(props) {\r\n\r\n    const [state, setState] = useState({\r\n        //loading: undefined,\r\n        done: undefined\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //   setTimeout(() => {\r\n    //     fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    //       .then(response => response.json())\r\n    //       .then(() => {\r\n    //         setState({ loading: true });\r\n    //         setTimeout(() => {\r\n    //           setState({ done: true });\r\n    //         }, 1000);\r\n    //       });\r\n    //   }, 1200);\r\n    // })\r\n\r\n    return (\r\n      <Styles className={`${props.className} text-center`}>\r\n          {!state.done ? (\r\n            <ReactLoading type={\"bars\"} color={\"white\"} />\r\n         ) : (\r\n            <h1>hello world</h1>\r\n         )}\r\n      </Styles>  \r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}