{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\client\\\\src\\\\components\\\\BookWindow\\\\Calendar.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport Hours from './Hours';\nimport CalendarHeader from './CalendarHeader';\nimport CalendarWeekDays from './CalendarWeekDays';\nimport CalendarCells from './CalendarCells';\nimport moustache from '../../pictures/moustache-calendar.png';\nconst Styles = styled.div`\n\n\n`;\nexport default function Calendar() {\n  const [state, setState] = useState({\n    currentMonth: new Date(2020, 5, 24),\n    selectedDate: new Date(),\n    currentDate: new Date(2020, 5, 24),\n    clients: []\n  });\n  useEffect(() => {\n    axios.get('http://localhost:5000/barber/').then(response => {\n      setState({\n        currentMonth: state.currentMonth,\n        selectedDate: state.selectedDate,\n        currentDate: state.currentDate,\n        clients: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  let nextMonth = () => {\n    setState({\n      currentMonth: dateFns.addMonths(state.currentMonth, 1),\n      selectedDate: state.selectedDate,\n      currentDate: state.currentDate,\n      clients: state.clients\n    });\n  };\n\n  let prevMonth = () => {\n    if (dateFns.differenceInCalendarMonths(state.currentDate, state.currentMonth) < 0) {\n      setState({\n        currentMonth: dateFns.subMonths(state.currentMonth, 1),\n        selectedDate: state.selectedDate,\n        currentDate: state.currentDate,\n        clients: state.clients\n      });\n    }\n  };\n\n  let onDateClick = day => {\n    if (dateFns.isSameDay(state.currentDate, day) | dateFns.isBefore(state.currentDate, day)) {\n      setState({\n        currentMonth: state.currentMonth,\n        selectedDate: day,\n        currentDate: state.currentDate,\n        clients: state.clients\n      }); // if (dateFns.differenceInCalendarMonths(state.currentMonth, state.selectedDate) > 0) {\n      //     prevMonth();\n      // } else if (dateFns.differenceInCalendarMonths(state.currentMonth, state.selectedDate) < 0) {\n      //     nextMonth();\n      // }\n    }\n  };\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    className: \"pt-2 pt-md-4 pb-3 bg-white rounded text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: moustache,\n    alt: \"moustache\",\n    className: \"mw-100 pb-0 pb-md-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(CalendarHeader, {\n    prevMonth: prevMonth,\n    nextMonth: nextMonth,\n    actualMonth: state.currentMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(CalendarWeekDays, {\n    actualMonth: state.currentMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(CalendarCells, {\n    state: state,\n    onDateClick: onDateClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(Hours, {\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/client/src/components/BookWindow/Calendar.jsx"],"names":["React","useState","useEffect","Jumbotron","axios","styled","dateFns","breakpoints","Hours","CalendarHeader","CalendarWeekDays","CalendarCells","moustache","Styles","div","Calendar","state","setState","currentMonth","Date","selectedDate","currentDate","clients","get","then","response","data","catch","error","console","log","nextMonth","addMonths","prevMonth","differenceInCalendarMonths","subMonths","onDateClick","day","isSameDay","isBefore"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport Hours from './Hours';\r\nimport CalendarHeader from './CalendarHeader';\r\nimport CalendarWeekDays from './CalendarWeekDays';\r\nimport CalendarCells from './CalendarCells';\r\nimport moustache from '../../pictures/moustache-calendar.png'\r\n\r\nconst Styles = styled.div`\r\n\r\n\r\n`\r\n\r\nexport default function Calendar() {\r\n\r\n    const [state, setState] = useState({\r\n        currentMonth: new Date(2020, 5, 24),\r\n        selectedDate: new Date(),\r\n        currentDate: new Date(2020, 5, 24),\r\n        clients: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/barber/')\r\n            .then(response => {\r\n                setState({\r\n                    currentMonth: state.currentMonth,\r\n                    selectedDate: state.selectedDate,\r\n                    currentDate: state.currentDate,\r\n                    clients: response.data\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }, []);\r\n\r\n    let nextMonth = () => {\r\n        setState({\r\n            currentMonth: dateFns.addMonths(state.currentMonth, 1),\r\n            selectedDate: state.selectedDate,\r\n            currentDate: state.currentDate,\r\n            clients: state.clients\r\n        });\r\n    }\r\n\r\n    let prevMonth = () => {\r\n        if (dateFns.differenceInCalendarMonths(state.currentDate, state.currentMonth) < 0) {\r\n            setState({\r\n                currentMonth: dateFns.subMonths(state.currentMonth, 1),\r\n                selectedDate: state.selectedDate,\r\n                currentDate: state.currentDate,\r\n                clients: state.clients\r\n            });\r\n        }\r\n    }\r\n\r\n    let onDateClick = day => {\r\n        if (dateFns.isSameDay(state.currentDate, day) | dateFns.isBefore(state.currentDate, day)) {\r\n            setState({\r\n                currentMonth: state.currentMonth,\r\n                selectedDate: day,\r\n                currentDate: state.currentDate,\r\n                clients: state.clients\r\n            });\r\n\r\n            // if (dateFns.differenceInCalendarMonths(state.currentMonth, state.selectedDate) > 0) {\r\n            //     prevMonth();\r\n            // } else if (dateFns.differenceInCalendarMonths(state.currentMonth, state.selectedDate) < 0) {\r\n            //     nextMonth();\r\n            // }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            <Jumbotron className=\"pt-2 pt-md-4 pb-3 bg-white rounded text-center\">\r\n            <img src={moustache} alt=\"moustache\" className=\"mw-100 pb-0 pb-md-4\"></img>\r\n                <CalendarHeader\r\n                    prevMonth={prevMonth}\r\n                    nextMonth={nextMonth}\r\n                    actualMonth={state.currentMonth}\r\n                />    \r\n                <CalendarWeekDays\r\n                    actualMonth={state.currentMonth}\r\n                />\r\n                <CalendarCells\r\n                    state={state}\r\n                    onDateClick={onDateClick}\r\n                />\r\n            </Jumbotron>\r\n            <Hours\r\n                state={state}\r\n            />\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}