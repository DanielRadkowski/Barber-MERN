{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\src\\\\components\\\\Calendar.jsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Hours from './Hours';\nconst Styles = styled.div`\n\n`;\nexport default function Calendar(props) {\n  const [state, setState] = useState({\n    currentMonth: new Date(),\n    selectedDate: new Date() // hoursWindow: \"d-none\"\n\n  });\n  const currentDate = new Date();\n\n  let renderHeader = () => {\n    const dateFormat = \"MMMM yyyy\";\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"arrow far fa-caret-square-left\",\n      onClick: prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, dateFns.format(this.state.currentMonth, dateFormat))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"arrow far fa-caret-square-right\",\n      onClick: nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }))));\n  };\n\n  let renderDays = () => {\n    const dateFormat = \"iiii\";\n    const days = [];\n    let startDate = dateFns.startOfWeek(this.state.currentMonth, {\n      weekStartsOn: 1\n    });\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(Col, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, days));\n  };\n\n  let renderCells = () => {\n    const {\n      currentMonth,\n      selectedDate\n    } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart, {\n      weekStartsOn: 1\n    });\n    const endDate = dateFns.endOfWeek(monthEnd, {\n      weekStartsOn: 1\n    });\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    for (day; day <= endDate; day++) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        days.push(React.createElement(Col, {\n          className: ` ${dateFns.isSameDay(day, selectedDate) ? \"text-danger\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`,\n          key: day,\n          onClick: () => onDateClick(cloneDay),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, formattedDate)));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push(React.createElement(Row, {\n        className: \"text-center\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, rows);\n  };\n\n  let onDateClick = day => {\n    this.setState({\n      selectedDate: day // hoursWindow: \"d-block\"\n\n    });\n  };\n\n  let nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  let prevMonth = () => {\n    if (dateFns.differenceInCalendarMonths(this.state.currentMonth, this.currentDate) > 0) {\n      this.setState({\n        currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n      });\n    }\n  };\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, renderHeader(), renderDays(), renderCells());\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/src/components/Calendar.jsx"],"names":["React","useState","styled","dateFns","breakpoints","Container","Row","Col","Hours","Styles","div","Calendar","props","state","setState","currentMonth","Date","selectedDate","currentDate","renderHeader","dateFormat","prevMonth","format","nextMonth","renderDays","days","startDate","startOfWeek","weekStartsOn","i","push","addDays","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","cloneDay","isSameDay","isSameMonth","onDateClick","addMonths","differenceInCalendarMonths","subMonths"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Hours from './Hours';\r\n\r\nconst Styles = styled.div`\r\n\r\n`\r\n\r\n\r\n\r\nexport default function Calendar(props) {\r\n\r\n    const [state, setState] = useState({\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n       // hoursWindow: \"d-none\"\r\n    });\r\n    \r\n    const currentDate = new Date();\r\n    \r\n    let renderHeader = () => {\r\n        const dateFormat = \"MMMM yyyy\";\r\n    \r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <i className=\"arrow far fa-caret-square-left\" onClick={prevMonth}></i>\r\n                    </Col>\r\n                    <Col>\r\n                        <span>\r\n                            {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                        </span>\r\n                    </Col>\r\n                    <Col>\r\n                        <i className=\"arrow far fa-caret-square-right\" onClick={nextMonth}></i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n    \r\n    let renderDays = () => {\r\n        const dateFormat = \"iiii\";\r\n        const days = [];\r\n    \r\n        let startDate = dateFns.startOfWeek(this.state.currentMonth, { weekStartsOn: 1 });\r\n    \r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <Col key={i}>\r\n                    {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n                </Col>\r\n            );\r\n        }\r\n    \r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">{days}</Row>\r\n            </Container>\r\n        );\r\n    \r\n    }\r\n    \r\n    let renderCells = () => {\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n        const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n    \r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n    \r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n    \r\n    \r\n        for (day; day <= endDate; day++) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n                days.push(\r\n                    <Col\r\n                    className={` ${dateFns.isSameDay(day, selectedDate) \r\n                        ? \"text-danger\" \r\n                        : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`}\r\n                                   \r\n                        key={day}\r\n                        onClick={() => onDateClick(cloneDay)}\r\n                        \r\n                    >\r\n                       {/* {console.log(state)} */}\r\n                        <span>{formattedDate}</span>\r\n                    </Col>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n            rows.push(\r\n                <Row className=\"text-center\" key={day}>\r\n                    {days}\r\n                </Row>\r\n            );\r\n            days = [];\r\n        }\r\n        return <Container>{rows}</Container>\r\n    }\r\n    \r\n    \r\n    \r\n    let onDateClick = day => {\r\n        this.setState({\r\n            selectedDate: day,\r\n            // hoursWindow: \"d-block\"\r\n        });\r\n     }\r\n    \r\n    let nextMonth = () => {\r\n        this.setState({\r\n            currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n        });\r\n    }\r\n    \r\n    let prevMonth = () => {\r\n        if (dateFns.differenceInCalendarMonths(this.state.currentMonth, this.currentDate) > 0) {\r\n            this.setState({\r\n                currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n            });\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <Styles>\r\n            {renderHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n            {/* <Hours class={state.hoursWindow} /> */}\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}