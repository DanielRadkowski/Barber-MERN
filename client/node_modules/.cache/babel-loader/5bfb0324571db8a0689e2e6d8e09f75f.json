{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\client\\\\src\\\\components\\\\BookWindow\\\\CalendarCells.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport circle from '../../pictures/red-circle.png';\nconst Styles = styled.div`\n\n@media (min-width: ${breakpoints.xs}) {\n    .my-col {\n        overflow: visible;\n    }\n    \n    .cell {\n        font-family: 'Anton', sans-serif;\n        font-size: 1.25em;\n    }\n\n    .choosen-cell {\n        background: #a5adc0;\n        color: #fff;\n    }\n    .avilable-cell {\n    &:hover {\n        cursor: pointer;\n        // background: url(${circle});\n        // background-size: 150%;\n        // background-repeat: no-repeat;\n        color: #fff;\n    }\n\n}\n\n}\n\n@media (min-width: ${breakpoints.md}) {\n    .cell {\n        font-size: 1.5em;\n}    \n`;\nconst Circle = styled.img`\n\n    width: 3em;\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    z-index: 2;\n\n\n`;\nexport default function CalendarCells(props) {\n  const {\n    currentMonth,\n    selectedDate,\n    currentDate\n  } = props.state;\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n  const startDate = dateFns.startOfWeek(monthStart, {\n    weekStartsOn: 1\n  });\n  const endDate = dateFns.endOfWeek(monthEnd, {\n    weekStartsOn: 1\n  });\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  for (day; day <= endDate; day++) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, \"d\");\n      const cloneDay = day;\n      days.push(React.createElement(Col, {\n        className: `${dateFns.isSameDay(day, selectedDate) ? \"choosen-cell\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"} \n                        ${dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day) ? \"avilable-cell\" : \"\"}\n                        px-0  border rounded my-col\n                        `,\n        key: day,\n        onClick: () => props.onDateClick(cloneDay),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"cell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, formattedDate), React.createElement(Circle, {\n        src: circle,\n        className: \"circle mx-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })));\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push(React.createElement(Row, {\n      className: \"text-center\",\n      key: day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, days));\n    days = [];\n  }\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, rows));\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/client/src/components/BookWindow/CalendarCells.jsx"],"names":["React","styled","dateFns","breakpoints","Container","Row","Col","circle","Styles","div","xs","md","Circle","img","CalendarCells","props","currentMonth","selectedDate","currentDate","state","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","weekStartsOn","endDate","endOfWeek","rows","days","day","formattedDate","i","format","cloneDay","push","isSameDay","isSameMonth","isBefore","onDateClick","addDays"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport circle from '../../pictures/red-circle.png'\r\n\r\nconst Styles = styled.div`\r\n\r\n@media (min-width: ${breakpoints.xs}) {\r\n    .my-col {\r\n        overflow: visible;\r\n    }\r\n    \r\n    .cell {\r\n        font-family: 'Anton', sans-serif;\r\n        font-size: 1.25em;\r\n    }\r\n\r\n    .choosen-cell {\r\n        background: #a5adc0;\r\n        color: #fff;\r\n    }\r\n    .avilable-cell {\r\n    &:hover {\r\n        cursor: pointer;\r\n        // background: url(${circle});\r\n        // background-size: 150%;\r\n        // background-repeat: no-repeat;\r\n        color: #fff;\r\n    }\r\n\r\n}\r\n\r\n}\r\n\r\n@media (min-width: ${breakpoints.md}) {\r\n    .cell {\r\n        font-size: 1.5em;\r\n}    \r\n`\r\nconst Circle = styled.img`\r\n\r\n    width: 3em;\r\n    position: absolute;\r\n    left: 0px;\r\n    top: 0px;\r\n    z-index: 2;\r\n\r\n\r\n`\r\n\r\nexport default function CalendarCells(props) {\r\n\r\n    const { currentMonth, selectedDate, currentDate } = props.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n    const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n\r\n    for (day; day <= endDate; day++) {\r\n        for (let i = 0; i < 7; i++) {\r\n            formattedDate = dateFns.format(day, \"d\");\r\n            const cloneDay = day;\r\n            days.push(\r\n                <Col\r\n                    className={`${dateFns.isSameDay(day, selectedDate)\r\n                        ? \"choosen-cell\"\r\n                        : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"} \r\n                        ${dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)\r\n                        ? \"avilable-cell\" : \"\"}\r\n                        px-0  border rounded my-col\r\n                        `}\r\n\r\n                    key={day}\r\n                    onClick={() => props.onDateClick(cloneDay)}\r\n                >\r\n                    <span className=\"cell\">{formattedDate}</span>\r\n                    <Circle src={circle} className=\"circle mx-auto\"></Circle>\r\n                </Col>\r\n            );\r\n            day = dateFns.addDays(day, 1);\r\n        }\r\n        rows.push(\r\n            <Row className=\"text-center\" key={day}>\r\n                {days}\r\n            </Row>\r\n        );\r\n        days = [];\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            <Container>{rows}</Container>\r\n        </Styles>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}