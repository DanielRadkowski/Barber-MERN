{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\src\\\\components\\\\BookForm\\\\Calendar.jsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Hours from './Hours';\nconst Styles = styled.div`\n\n`;\nexport default function Calendar() {\n  const [state, setState] = useState({\n    currentMonth: new Date(),\n    selectedDate: new Date() // hoursWindow: \"d-none\"\n\n  });\n  const currentDate = new Date();\n\n  function nextMonth() {\n    setState({\n      currentMonth: dateFns.addMonths(state.currentMonth, 1),\n      selectedDate: state.selectedDate\n    });\n  }\n\n  function prevMonth() {\n    if (dateFns.differenceInCalendarMonths(currentDate, state.currentMonth) < 0) {\n      setState({\n        currentMonth: dateFns.subMonths(state.currentMonth, 1),\n        selectedDate: state.selectedDate\n      });\n    }\n  }\n\n  function calendarHeader() {\n    const dateFormat = \"MMMM yyyy\";\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"arrow far fa-caret-square-left\",\n      onClick: prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, dateFns.format(state.currentMonth, dateFormat))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"arrow far fa-caret-square-right\",\n      onClick: nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }))));\n  }\n\n  function renderDays() {\n    const dateFormat = \"iiii\";\n    const days = [1, 2, 3, 4, 5, 6, 7];\n    days.map(i => React.createElement(Col, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, dateFns.format(dateFns.addDays(1, i), dateFormat)));\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, days));\n  }\n\n  function renderCells() {\n    const {\n      currentMonth,\n      selectedDate\n    } = state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart, {\n      weekStartsOn: 1\n    });\n    const endDate = dateFns.endOfWeek(monthEnd, {\n      weekStartsOn: 1\n    });\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    for (day; day <= endDate; day++) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        days.push(React.createElement(Col, {\n          className: ` ${dateFns.isSameDay(day, selectedDate) ? \"text-danger\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`,\n          key: day,\n          onClick: () => onDateClick(cloneDay),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, formattedDate)));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push(React.createElement(Row, {\n        className: \"text-center\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, rows);\n  }\n\n  function onDateClick(day) {\n    if (dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)) {\n      setState({\n        currentMonth: state.currentMonth,\n        selectedDate: day // hoursWindow: \"d-block\"\n\n      });\n    }\n  }\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, calendarHeader(), renderDays(), renderCells());\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/src/components/BookForm/Calendar.jsx"],"names":["React","useState","styled","dateFns","breakpoints","Container","Row","Col","Hours","Styles","div","Calendar","state","setState","currentMonth","Date","selectedDate","currentDate","nextMonth","addMonths","prevMonth","differenceInCalendarMonths","subMonths","calendarHeader","dateFormat","format","renderDays","days","map","i","addDays","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","weekStartsOn","endDate","endOfWeek","rows","day","formattedDate","cloneDay","push","isSameDay","isSameMonth","onDateClick","isBefore"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Hours from './Hours';\r\n\r\nconst Styles = styled.div`\r\n\r\n`\r\n\r\n\r\n\r\nexport default function Calendar() {\r\n\r\n    const [state, setState] = useState({\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n        // hoursWindow: \"d-none\"\r\n    });\r\n\r\n    const currentDate = new Date();\r\n\r\n    function nextMonth() {\r\n        setState({\r\n            currentMonth: dateFns.addMonths(state.currentMonth, 1),\r\n            selectedDate: state.selectedDate\r\n        });\r\n    }\r\n\r\n    function prevMonth() {\r\n        if (dateFns.differenceInCalendarMonths(currentDate, state.currentMonth) < 0) {\r\n            setState({\r\n                currentMonth: dateFns.subMonths(state.currentMonth, 1),\r\n                selectedDate: state.selectedDate\r\n            });\r\n        }\r\n    }\r\n\r\n    function calendarHeader() {\r\n        const dateFormat = \"MMMM yyyy\";\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <i className=\"arrow far fa-caret-square-left\" onClick={prevMonth}></i>\r\n                    </Col>\r\n                    <Col>\r\n                        <span>\r\n                            {dateFns.format(state.currentMonth, dateFormat)}\r\n                        </span>\r\n                    </Col>\r\n                    <Col>\r\n                        <i className=\"arrow far fa-caret-square-right\" onClick={nextMonth}></i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    function renderDays() {\r\n        const dateFormat = \"iiii\";\r\n        const days = [1, 2, 3, 4, 5, 6, 7];\r\n        \r\n        days.map(i =>\r\n            <Col key={i}>\r\n                {dateFns.format(dateFns.addDays(1, i), dateFormat)}\r\n            </Col>);\r\n\r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">{days}</Row>\r\n            </Container>\r\n        );\r\n\r\n    }\r\n\r\n    function renderCells() {\r\n        const { currentMonth, selectedDate } = state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n        const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n\r\n        for (day; day <= endDate; day++) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n                days.push(\r\n                    <Col\r\n                        className={` ${dateFns.isSameDay(day, selectedDate)\r\n                            ? \"text-danger\"\r\n                            : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`}\r\n\r\n                        key={day}\r\n                        onClick={() => onDateClick(cloneDay)}\r\n                    >\r\n                        <span>{formattedDate}</span>\r\n                    </Col>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n            rows.push(\r\n                <Row className=\"text-center\" key={day}>\r\n                    {days}\r\n                </Row>\r\n            );\r\n            days = [];\r\n        }\r\n        return <Container>{rows}</Container>\r\n    }\r\n\r\n\r\n\r\n    function onDateClick(day) {\r\n        if (dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)) {\r\n            setState({\r\n                currentMonth: state.currentMonth,\r\n                selectedDate: day\r\n                // hoursWindow: \"d-block\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            {calendarHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n            {/* <Hours class={state.hoursWindow} /> */}\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}