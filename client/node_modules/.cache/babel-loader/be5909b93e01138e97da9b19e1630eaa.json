{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\Barber Andrew\\\\Barber 2.0\\\\barber-andrew\\\\src\\\\components\\\\BookForm\\\\Calendar.jsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport * as dateFns from 'date-fns';\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Hours from './Hours';\nimport CalendarHeader from './CalendarHeader';\nconst Styles = styled.div`\n\n`;\nexport default function Calendar() {\n  const [state, setState] = useState({\n    currentMonth: new Date(),\n    selectedDate: new Date() // hoursWindow: \"d-none\"\n\n  });\n  const currentDate = new Date();\n\n  function nextMonth() {\n    setState({\n      currentMonth: dateFns.addMonths(state.currentMonth, 1),\n      selectedDate: state.selectedDate\n    });\n  }\n\n  function prevMonth() {\n    if (dateFns.differenceInCalendarMonths(currentDate, state.currentMonth) < 0) {\n      setState({\n        currentMonth: dateFns.subMonths(state.currentMonth, 1),\n        selectedDate: state.selectedDate\n      });\n    }\n  }\n\n  function renderDays() {\n    const days = [1, 2, 3, 4, 5, 6, 7].map(i => React.createElement(Col, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, dateFns.format(dateFns.setDay(state.currentMonth, i), \"iiii\")));\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, days));\n  }\n\n  function renderCells() {\n    const {\n      currentMonth,\n      selectedDate\n    } = state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart, {\n      weekStartsOn: 1\n    });\n    const endDate = dateFns.endOfWeek(monthEnd, {\n      weekStartsOn: 1\n    });\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    for (day; day <= endDate; day++) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, \"d\");\n        const cloneDay = day;\n        days.push(React.createElement(Col, {\n          className: ` ${dateFns.isSameDay(day, selectedDate) ? \"text-danger\" : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`,\n          key: day,\n          onClick: () => onDateClick(cloneDay),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, formattedDate)));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push(React.createElement(Row, {\n        className: \"text-center\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, rows);\n  }\n\n  function onDateClick(day) {\n    if (dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)) {\n      setState({\n        currentMonth: state.currentMonth,\n        selectedDate: day // hoursWindow: \"d-block\"\n\n      });\n    }\n  }\n\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(CalendarHeader, {\n    prevMonth: prevMonth,\n    nextMonth: nextMonth,\n    actualMonth: state.currentMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), renderDays(), renderCells());\n}","map":{"version":3,"sources":["D:/Web Development/Barber Andrew/Barber 2.0/barber-andrew/src/components/BookForm/Calendar.jsx"],"names":["React","useState","styled","dateFns","breakpoints","Container","Row","Col","Hours","CalendarHeader","Styles","div","Calendar","state","setState","currentMonth","Date","selectedDate","currentDate","nextMonth","addMonths","prevMonth","differenceInCalendarMonths","subMonths","renderDays","days","map","i","format","setDay","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","weekStartsOn","endDate","endOfWeek","rows","day","formattedDate","cloneDay","push","isSameDay","isSameMonth","onDateClick","addDays","isBefore"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as dateFns from 'date-fns';\r\nimport { breakpoints } from 'styled-bootstrap-responsive-breakpoints';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Hours from './Hours';\r\nimport CalendarHeader from './CalendarHeader';\r\n\r\nconst Styles = styled.div`\r\n\r\n`\r\n\r\n\r\nexport default function Calendar() {\r\n\r\n    const [state, setState] = useState({\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n        // hoursWindow: \"d-none\"\r\n    });\r\n\r\n    const currentDate = new Date();\r\n\r\n\r\n    function nextMonth() {\r\n        setState({\r\n            currentMonth: dateFns.addMonths(state.currentMonth, 1),\r\n            selectedDate: state.selectedDate\r\n        });\r\n    }\r\n\r\n    function prevMonth() {\r\n        if (dateFns.differenceInCalendarMonths(currentDate, state.currentMonth) < 0) {\r\n            setState({\r\n                currentMonth: dateFns.subMonths(state.currentMonth, 1),\r\n                selectedDate: state.selectedDate\r\n            });\r\n        }\r\n    }\r\n\r\n    function renderDays() {\r\n\r\n        const days = [1, 2, 3, 4, 5, 6, 7].map(i =>\r\n            <Col key={i}>\r\n                {dateFns.format(dateFns.setDay(state.currentMonth, i), \"iiii\")}\r\n            </Col>\r\n        );\r\n        return (\r\n            <Container>\r\n                <Row className=\"text-center\">{days}</Row>\r\n            </Container>\r\n        );\r\n\r\n    }\r\n\r\n    function renderCells() {\r\n        const { currentMonth, selectedDate } = state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(monthStart);\r\n        const startDate = dateFns.startOfWeek(monthStart, { weekStartsOn: 1 });\r\n        const endDate = dateFns.endOfWeek(monthEnd, { weekStartsOn: 1 });\r\n\r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n\r\n\r\n        for (day; day <= endDate; day++) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, \"d\");\r\n                const cloneDay = day;\r\n                days.push(\r\n                    <Col\r\n                        className={` ${dateFns.isSameDay(day, selectedDate)\r\n                            ? \"text-danger\"\r\n                            : dateFns.isSameMonth(day, monthStart) ? \"\" : \"text-muted\"}`}\r\n\r\n                        key={day}\r\n                        onClick={() => onDateClick(cloneDay)}\r\n                    >\r\n                        <span>{formattedDate}</span>\r\n                    </Col>\r\n                );\r\n                day = dateFns.addDays(day, 1);\r\n            }\r\n            rows.push(\r\n                <Row className=\"text-center\" key={day}>\r\n                    {days}\r\n                </Row>\r\n            );\r\n            days = [];\r\n        }\r\n        return <Container>{rows}</Container>\r\n    }\r\n\r\n\r\n\r\n    function onDateClick(day) {\r\n        if (dateFns.isSameDay(currentDate, day) | dateFns.isBefore(currentDate, day)) {\r\n            setState({\r\n                currentMonth: state.currentMonth,\r\n                selectedDate: day\r\n                // hoursWindow: \"d-block\"\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            <CalendarHeader \r\n                prevMonth = {prevMonth}\r\n                nextMonth = {nextMonth}\r\n                actualMonth = {state.currentMonth}\r\n            />\r\n            {renderDays()}\r\n            {renderCells()}\r\n            {/* <Hours class={state.hoursWindow} /> */}\r\n        </Styles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}